@using PKure.Models
@using PKure.Services
@inject LanguageService LanguageService

<div class="pokemon-detail-card">
    <!-- Close button -->
    <div class="close-button" @onclick="HandleClose">×</div>

    <!-- Gender selector buttons -->
    <div class="gender-selector">
        <div class="gender-button male">♂</div>
        <div class="gender-button female">♀</div>
    </div>

    <div class="pokemon-detail-card-header">
        <div class="pokemon-number">#@Pokemon.Id</div>
        <img src="@Pokemon.ImageUrl" alt="@Pokemon.SpeciesDetails.GetLocalizedName(LanguageService.CurrentLanguage)" class="pokemon-img">
        <h1 class="pokemon-name">@Pokemon.SpeciesDetails.GetLocalizedName(LanguageService.CurrentLanguage)</h1>
        <p class="pokemon-title">@Pokemon.SpeciesDetails.GetLocalizedGenus(LanguageService.CurrentLanguage)</p>
        <div class="type-badges">
            @foreach (var type in Pokemon.Types)
            {
                <div class="type-badge">@type.Details.GetLocalizedName(LanguageService.CurrentLanguage)</div>
            }
        </div>
    </div>

    <div class="pokemon-detail-card-section">
        <h2 class="section-title">HABILIDADES</h2>
        <div class="abilities">
            @foreach (var ability in Pokemon.Abilities)
            {
                <div class="ability">@ability.Details.GetLocalizedName(LanguageService.CurrentLanguage)</div>
            }
        </div>
    </div>

    <div class="pokemon-detail-card-section">
        <h2 class="section-title">DEBILIDADES</h2>
        <div class="weaknesses">
            <!-- Aquí deberías agregar la lógica para mostrar las debilidades -->
        </div>
    </div>

    <div class="pokemon-detail-card-section">
        <h2 class="section-title">ESTADÍSTICAS</h2>
        <div class="stats-container">
            @foreach (var stat in Pokemon.Stats)
            {
                <div class="stat-row">
                    <div class="stat-name">@stat.Details.GetLocalizedName(LanguageService.CurrentLanguage)</div>
                    <div class="stat-bar-container">
                        <div class="stat-bar" style="width: @stat.BaseStat%;"></div>
                    </div>
                    <div class="stat-value">@stat.BaseStat</div>
                </div>
            }
        </div>
    </div>

    <div class="pokemon-detail-card-section">
        <h2 class="section-title">EVOLUCIÓN</h2>
        <div class="evolution-chain">
            @if (Pokemon.EvolutionChain?.Chain != null)
            {
                @foreach (var stage in GetEvolutionStages(Pokemon.EvolutionChain.Chain))
                {
                    <div class="evolution-stage">
                        <div class="evolution-img">
                            <div class="evolution-sprite">@stage.Name[0]</div>
                        </div>
                        <div class="evolution-name">@stage.Name</div>
                        <div class="evolution-level">@stage.Level</div>
                    </div>
                    @if (stage != GetEvolutionStages(Pokemon.EvolutionChain.Chain).Last())
                    {
                        <div class="evolution-arrow">›</div>
                    }
                }
            }
        </div>
    </div>

    <div class="navigation">
        <div class="nav-button">
            ‹ <span class="nav-number">#@(Pokemon.Id - 1)</span>
        </div>
        <div class="nav-button">
            <span class="nav-number">#@(Pokemon.Id + 1)</span> ›
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Pokemon Pokemon { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync();
    }

    private List<(string Name, string Level)> GetEvolutionStages(EvolutionChainLink chainLink, string level = "")
    {
        var stages = new List<(string Name, string Level)>
        {
            (chainLink.SpeciesDetails?.GetLocalizedName(LanguageService.CurrentLanguage) ?? chainLink.Species.Name, level)
        };

        foreach (var evolvesTo in chainLink.EvolvesTo)
        {
            string evolutionLevel = "Lvl ";
            if (evolvesTo.EvolutionDetails?.FirstOrDefault()?.MinLevel != null)
            {
                evolutionLevel += evolvesTo.EvolutionDetails.First().MinLevel.Value.ToString();
            }
            else
            {
                evolutionLevel += evolvesTo.SpeciesDetails?.GetLocalizedName(LanguageService.CurrentLanguage) ?? evolvesTo.Species.Name;
            }

            stages.AddRange(GetEvolutionStages(evolvesTo, evolutionLevel));
        }

        return stages;
    }
}